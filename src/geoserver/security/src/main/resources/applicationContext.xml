<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	    	http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"
	default-autowire="byName">


	<bean id="geofence-gs-property-configurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath*:geofence-geoserver.properties" />
		<property name="ignoreResourceNotFound" value="false" />
	</bean>

	<!-- TODO: add authorization to these requests using the hints at
	     http://book.javanb.com/Professional-Java-Development-with-the-Spring-Framework/BBL0071.html
	-->
	<!--
	    see if you can add some ehcache proxy interceptor when we switch to using remoted services
	-->

	<bean id="baseReaderService" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean" lazy-init="true">
        <property name="serviceUrl" value="${servicesUrl}"/>
        <property name="serviceInterface" value="it.geosolutions.geofence.services.RuleReaderService"/>
    </bean>

	<bean id="cachedRuleReader" class="it.geosolutions.geofence.cache.CachedRuleReader" lazy-init="true" init-method="init">
        <property name="cacheInitParams.size" value="1000"/>
        <property name="cacheInitParams.refreshMilliSec" value="30000"/>
        <property name="cacheInitParams.expireMilliSec" value="60000"/>

        <property name="realRuleReaderService" ref="baseReaderService"/>
    </bean>

    <!-- You may replace the cachedRuleReader ref with ruleReaderService ref in order to disable the caching -->
    <alias name="cachedRuleReader" alias="ruleReaderService"/>

	<bean id="geofenceRuleAccessManager" class="it.geosolutions.geofence.GeofenceAccessManager">
<!--		<constructor-arg index="0" ref="ruleReaderService" />-->
		<constructor-arg index="0" ref="ruleReaderService" />
		<constructor-arg index="1" ref="rawCatalog" />
		<constructor-arg index="2" value="${instanceName}" />
        
        <property name="allowDynamicStyles" value="${allowDynamicStyles}"/>
        <property name="allowRemoteAndInlineLayers" value="${allowRemoteAndInlineLayers}"/>
        <property name="grantWriteToWorkspacesToAuthenticatedUsers" value="${grantWriteToWorkspacesToAuthenticatedUsers}"/>
        <property name="useRolesToFilter" value="${useRolesToFilter}"/>
        <property name="acceptedRoles" value="${acceptedRoles}"/>
	</bean>

    <!-- =================================================================== -->
    <!-- Next part is about REST command against the cache -->
    <!-- =================================================================== -->

    <bean id="ruleReaderCacheMapping" class="org.geoserver.rest.RESTMapping">
        <property name="routes">
            <map>
                <entry>
                    <key>
                        <value>/ruleCache/info</value>
                    </key>
                    <value>ruleCacheStatsFinder</value>
                </entry>
                <entry>
                    <key>
                        <value>/ruleCache/invalidate</value>
                    </key>
                    <value>ruleCacheInvalidator</value>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="ruleCacheStatsFinder" class="it.geosolutions.geofence.cache.rest.RuleCacheStatsFinder" >
        <constructor-arg index="0" ref="cachedRuleReader"/>
    </bean>
    <bean id="ruleCacheInvalidator" class="it.geosolutions.geofence.cache.rest.RuleCacheInvalidator" >
        <constructor-arg index="0" ref="cachedRuleReader"/>
    </bean>


    <!-- geoserver auth mechanism -->

    <bean id="geofenceFilter" class="it.geosolutions.geoserver.authentication.filter.GeoFenceAuthFilterProvider">
        <property name="ruleReaderService" ref="ruleReaderService"/>
        <property name="geofenceAuth" ref="geofenceAuth"/>
    </bean>

    <bean id="geofenceAuth" class="it.geosolutions.geoserver.authentication.auth.GeoFenceSecurityProvider">
        <property name="ruleReaderService" ref="ruleReaderService"/>
    </bean>

</beans>
